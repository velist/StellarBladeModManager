以下是游戏MOD管理器的详细文字逻辑，按功能模块和关键节点组织：

### 一、文件管理核心逻辑
#### 1. 导入MOD流程
- **前提条件**：
  - 压缩包内至少存在一组同名文件（扩展名分别为`.pak`, `.ucas`, `.utoc`）
  - 允许存在其他无关文件（如.txt/.jpg等）
- **操作流程**：
  1. 解压压缩包到临时目录
  2. **递归扫描**：检测嵌套压缩包（多层压缩需递归解压）
  3. **MOD识别**：
     - 遍历所有文件，按文件名（不含扩展名）分组
     - 有效MOD判定：每组必须同时包含`.pak`, `.ucas`, `.utoc`三个文件
  4. 对每个有效MOD：
     - 在`~mods`目录创建唯一子目录（重名处理：自动追加序号）
     - 复制三文件到`~mods`子目录
     - 在`backups`目录创建同名子目录并复制三文件
  5. 记录元数据：
     - 原始文件名
     - 初始显示名（=文件名）
     - 存储路径（`~mods`和`backups`）
     - 所属目录ID（默认当前UI选中目录）

#### 2. 首次启动初始化
- **扫描`~mods`目录**：
  1. 遍历所有子目录
  2. **有效性检查**：
     - 目录内是否存在同名三文件（扩展名`.pak/.ucas/.utoc`）
  3. 对有效MOD：
     - 在`backups`创建同名目录
     - 复制三文件到备份目录
     - 创建初始数据库记录

#### 3. 状态管理操作
| 操作  | 文件操作逻辑                                                                 | 元数据变化      |
|-------|----------------------------------------------------------------------------|----------------|
| 禁用  | 删除`~mods`中对应MOD的三个文件（保留目录结构）                                | 状态标记为禁用  |
| 启用  | 从`backups`复制三个文件到`~mods`原路径                                        | 状态标记为启用  |
| 删除  | 删除`~mods`和`backups`中的整个MOD目录                                        | 移除数据库记录  |
| 重命名| 无文件操作                                                                  | 更新显示名字段  |

---

### 二、目录系统逻辑（B区）
#### 1. 目录结构管理
- **数据结构**：
  - 树形结构（ID/父ID/名称/排序号）
  - 根目录ID为`null`
- **拖拽规则**：
  1. 禁止循环嵌套（拖动目录不能是其子孙节点）
  2. 拖拽目录时：
     - 更新该目录的父节点ID
     - 自动迁移其下所有MOD到新目录
  3. 拖拽MOD到目录：
     - 更新MOD的目录ID字段

#### 2. 关键验证节点
- 拖拽操作时实时检查循环嵌套风险
- 目录删除前确认是否为空目录（非空目录需先清空MOD）

---

### 三、用户界面交互逻辑
#### A区（顶部导航）
1. **搜索功能**：
   - 输入关键词时实时查询：
     ```sql
     SELECT * FROM mods 
     WHERE original_name LIKE '%{kw}%' 
        OR display_name LIKE '%{kw}%'
     ```
   - 结果实时刷新C2区列表

#### B区（目录树）
- **渲染逻辑**：
  - 根据父ID递归生成树形结构
  - 展开/折叠状态本地保存

#### C区（MOD管理）
| 区域  | 功能                                                                 | 关键逻辑节点                                                                 |
|-------|----------------------------------------------------------------------|-----------------------------------------------------------------------------|
| **C1**| MOD信息卡                                                           | - 图片上传：保存到`/preview_images/{mod_id}.jpg`<br>- 字段展示：优先显示自定义名称 |
| **C2**| MOD列表                                                             | - 目录切换时：加载该目录下所有MOD（不包含子目录）<br>- 多选操作：批量禁用/启用/删除/移动 |

**C2区操作细节**：
1. **拖拽排序**：
   - 在列表内拖动改变显示顺序（更新sort_order字段）
2. **右键菜单**：
   - 禁用/启用：即时切换状态（需刷新图标显示）
   - 删除：二次确认弹窗（"永久删除MOD文件！"）
   - 移动：弹出目录选择器
3. **名称编辑**：
   - 双击名称进入编辑模式
   - 失焦时自动保存到数据库

---

### 四、关键验证与安全机制
#### 1. 文件操作验证点
- **导入时**：
  - 解压失败：回滚临时文件，提示错误代码
  - MOD无效：跳过并记录日志（保留其他有效MOD）
- **启用/禁用时**：
  - 文件完整性校验（三文件是否齐全）
  - 冲突检测（启用时目标位置是否已存在同名文件）
- **删除时**：
  - 操作前确认弹窗
  - 删除后检查目录是否为空（自动清理空目录）

#### 2. 数据一致性保障
- **启动时自检**：
  1. 比对`~mods`和`backups`文件
  2. 异常情况处理：
     - `~mods`中多余文件：标记为"未管理状态"
     - `backups`中缺失文件：标记为"需修复"
- **操作日志**：
  - 记录所有关键操作（导入/删除/状态变更）
  - 异常操作可回溯

---

### 五、特殊场景处理
1. **多MOD同名冲突**：
   - 导入时：自动重命名（追加_1, _2）
   - 启用时：提示覆盖或重命名
   
2. **嵌套压缩包深度**：
   - 设置递归解压最大深度（建议≤5层）
   - 超深嵌套提示用户手动解压

3. **大文件处理**：
   - 文件复制时显示进度条
   - 超过100MB文件启用流式传输

4. **图片管理**：
   - 格式限制：仅接受JPG/PNG
   - 尺寸处理：非标准比例（1:1或16:9）自动裁剪居中

---

### 六、状态同步逻辑
| 操作          | 需要刷新的UI组件                     |
|---------------|-------------------------------------|
| 导入新MOD     | B区目录树、C2列表、搜索索引          |
| 禁用/启用MOD  | C2列表状态图标、C1信息卡             |
| 目录结构调整  | 整个B区树形结构                      |
| 重命名MOD     | C2列表项、C1信息卡、搜索索引         |

此设计确保所有操作闭环，重点强调：
1. 文件操作的双向同步（`~mods` ↔ `backups`）
2. UI状态与数据库的实时一致性
3. 异常情况的主动检测和恢复机制
4. 用户自定义数据（名称/图片/目录）的灵活管理